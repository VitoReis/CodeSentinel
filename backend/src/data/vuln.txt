1. SQL Injection
   - Descrição: Permite que um atacante execute comandos SQL maliciosos em um banco de dados através de dados fornecidos pelo usuário.
   - Exemplo em PHP:
     php
     $id = $_GET['id'];
     $query = "SELECT * FROM users WHERE id = '$id'";
     $result = mysqli_query($conn, $query);
     
   - Exemplo em JavaScript (Node.js):
     javascript
     const id = req.query.id;
     const query = `SELECT * FROM users WHERE id = '${id}'`;
     db.query(query, (err, results) => { /*...*/ });
---
2. Cross-Site Scripting (XSS)
   - Descrição: Permite que um atacante injete scripts maliciosos em páginas web visualizadas por outros usuários.
   - Exemplo em JavaScript (Client-Side):
     html
     <input type="text" id="userInput">
     <div id="output"></div>
     <script>
       document.getElementById('userInput').addEventListener('input', function() {
         document.getElementById('output').innerHTML = this.value;
       });
     </script> 
---
3. Insecure Direct Object References (IDOR)
   - Descrição: Permite que um atacante acesse objetos diretamente através de URLs ou outros parâmetros.
   - Exemplo em PHP:
     php
     $file = $_GET['file'];
     include($file);
---
4. Cross-Site Request Forgery (CSRF)
   - Descrição: Permite que um atacante faça ações em nome de um usuário autenticado sem seu consentimento.
   - Exemplo em HTML:
     html
     <form action="http://example.com/transfer" method="POST">
       <input type="hidden" name="amount" value="1000">
       <input type="submit" value="Transfer">
     </form>
---
5. Command Injection
   - Descrição: Permite que um atacante execute comandos do sistema operacional através de uma aplicação.
   - Exemplo em Python:
     python
     import os
     user_input = input("Enter your name: ")
     os.system(f"echo {user_input}")
---
6. Sensitive Data Exposure
   - Descrição: Falhas na proteção de dados sensíveis, como informações de cartão de crédito ou dados pessoais.
   - Exemplo em Java:
     java
     public class SensitiveData {
       private String password = "mySecretPassword";
       public String getPassword() {
         return password;
       }
     }
---
7. Broken Authentication
   - Descrição: Falhas na implementação de mecanismos de autenticação, permitindo que atacantes assumam a identidade de outros usuários.
   - Exemplo em PHP:
     php
     session_start();
     $_SESSION['user'] = $username;
     // Falta de proteção adequada para garantir a identidade do usuário
---
8. Improper Error Handling
   - Descrição: Falta de tratamento adequado de erros, revelando informações sensíveis aos atacantes.
   - Exemplo em Ruby:
     ruby
     begin
       # Código que pode gerar uma exceção
     rescue StandardError => e
       puts "An error occurred: #{e.message}"
     end
---
9. Unvalidated Redirects and Forwards
   - Descrição: Permite que um atacante redirecione ou encaminhe usuários para sites maliciosos.
   - Exemplo em JavaScript (Node.js):
     javascript
     app.get('/redirect', (req, res) => {
       const url = req.query.url;
       res.redirect(url);
     });
---
10. File Inclusion
    - Descrição: Permite que um atacante inclua arquivos no servidor, o que pode levar à execução de código malicioso.
    - Exemplo em PHP:
      php
      $file = $_GET['file'];
      include($file);